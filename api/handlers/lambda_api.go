// Code generated by jsonrpc2. DO NOT EDIT.
package handlers

import (
	"context"
	"encoding/json"
	jsonrpc2 "github.com/reddec/jsonrpc2"
	api "github.com/reddec/trusted-cgi/api"
	types "github.com/reddec/trusted-cgi/types"
)

func RegisterLambdaAPI(router *jsonrpc2.Router, wrap api.LambdaAPI, typeHandler interface {
	ValidateToken(ctx context.Context, value *api.Token) error
}) []string {
	router.RegisterFunc("LambdaAPI.Upload", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 []byte     `json:"tarGz"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Upload(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.Download", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Download(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("LambdaAPI.Push", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"file"`
			Arg3 []byte     `json:"content"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2, &args.Arg3)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Push(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3)
	})

	router.RegisterFunc("LambdaAPI.Pull", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"file"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Pull(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.Remove", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Remove(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("LambdaAPI.Files", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"dir"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Files(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.Info", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Info(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("LambdaAPI.Update", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token     `json:"token"`
			Arg1 string         `json:"uid"`
			Arg2 types.Manifest `json:"manifest"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Update(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.CreateFile", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"path"`
			Arg3 bool       `json:"dir"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2, &args.Arg3)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.CreateFile(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3)
	})

	router.RegisterFunc("LambdaAPI.RemoveFile", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"path"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.RemoveFile(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.RenameFile", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"oldPath"`
			Arg3 string     `json:"newPath"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2, &args.Arg3)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.RenameFile(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3)
	})

	router.RegisterFunc("LambdaAPI.Stats", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 int        `json:"limit"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Stats(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.Actions", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Actions(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("LambdaAPI.Invoke", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"action"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Invoke(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.Link", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"uid"`
			Arg2 string     `json:"alias"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Link(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("LambdaAPI.Unlink", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"alias"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Unlink(ctx, args.Arg0, args.Arg1)
	})

	return []string{"LambdaAPI.Upload", "LambdaAPI.Download", "LambdaAPI.Push", "LambdaAPI.Pull", "LambdaAPI.Remove", "LambdaAPI.Files", "LambdaAPI.Info", "LambdaAPI.Update", "LambdaAPI.CreateFile", "LambdaAPI.RemoveFile", "LambdaAPI.RenameFile", "LambdaAPI.Stats", "LambdaAPI.Actions", "LambdaAPI.Invoke", "LambdaAPI.Link", "LambdaAPI.Unlink"}
}
