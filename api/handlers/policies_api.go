// Code generated by jsonrpc2. DO NOT EDIT.
package handlers

import (
	"context"
	"encoding/json"
	jsonrpc2 "github.com/reddec/jsonrpc2"
	api "github.com/reddec/trusted-cgi/api"
	application "github.com/reddec/trusted-cgi/application"
)

func RegisterPoliciesAPI(router *jsonrpc2.Router, wrap api.PoliciesAPI, typeHandler interface {
	ValidateToken(ctx context.Context, value *api.Token) error
}) []string {
	router.RegisterFunc("PoliciesAPI.List", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.List(ctx, args.Arg0)
	})

	router.RegisterFunc("PoliciesAPI.Create", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token                   `json:"token"`
			Arg1 string                       `json:"policy"`
			Arg2 application.PolicyDefinition `json:"definition"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Create(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("PoliciesAPI.Remove", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"policy"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Remove(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("PoliciesAPI.Update", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token                   `json:"token"`
			Arg1 string                       `json:"policy"`
			Arg2 application.PolicyDefinition `json:"definition"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Update(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("PoliciesAPI.Apply", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"lambda"`
			Arg2 string     `json:"policy"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Apply(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("PoliciesAPI.Clear", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *api.Token `json:"token"`
			Arg1 string     `json:"lambda"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Clear(ctx, args.Arg0, args.Arg1)
	})

	return []string{"PoliciesAPI.List", "PoliciesAPI.Create", "PoliciesAPI.Remove", "PoliciesAPI.Update", "PoliciesAPI.Apply", "PoliciesAPI.Clear"}
}
