// Code generated by jsonrpc2. DO NOT EDIT.
//go:generate jsonrpc2-gen -f ../jsonrpc2.yaml -I API
package server

import (
	"context"
	"encoding/json"
	jsonrpc2 "github.com/reddec/jsonrpc2"
	application "github.com/reddec/trusted-cgi/application"
	types "github.com/reddec/trusted-cgi/types"
)

func registerAPI(router *jsonrpc2.Router, wrap API, typeHandler interface {
	ValidateToken(ctx context.Context, value *Token) error
}) []string {
	router.RegisterFunc("API.Login", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 string `json:"login"`
			Arg1 string `json:"password"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		return wrap.Login(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.ChangePassword", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"password"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.ChangePassword(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.Create", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Create(ctx, args.Arg0)
	})

	router.RegisterFunc("API.Config", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Config(ctx, args.Arg0)
	})

	router.RegisterFunc("API.Apply", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token                    `json:"token"`
			Arg1 application.ProjectConfig `json:"config"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Apply(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.AllTemplates", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.AllTemplates(ctx, args.Arg0)
	})

	router.RegisterFunc("API.CreateFromTemplate", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"templateName"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.CreateFromTemplate(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.Upload", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 []byte `json:"tarGz"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Upload(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("API.Download", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Download(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.Push", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 string `json:"file"`
			Arg3 []byte `json:"content"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2, &args.Arg3)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Push(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3)
	})

	router.RegisterFunc("API.Pull", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 string `json:"file"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Pull(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("API.List", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.List(ctx, args.Arg0)
	})

	router.RegisterFunc("API.Remove", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Remove(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.Templates", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Templates(ctx, args.Arg0)
	})

	router.RegisterFunc("API.Files", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"name"`
			Arg2 string `json:"dir"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Files(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("API.Info", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Info(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.Update", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token         `json:"token"`
			Arg1 string         `json:"uid"`
			Arg2 types.Manifest `json:"manifest"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Update(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("API.CreateFile", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 string `json:"path"`
			Arg3 bool   `json:"dir"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2, &args.Arg3)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.CreateFile(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3)
	})

	router.RegisterFunc("API.RemoveFile", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 string `json:"path"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.RemoveFile(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("API.RenameFile", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 string `json:"oldPath"`
			Arg3 string `json:"newPath"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2, &args.Arg3)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.RenameFile(ctx, args.Arg0, args.Arg1, args.Arg2, args.Arg3)
	})

	router.RegisterFunc("API.GlobalStats", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 int    `json:"limit"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.GlobalStats(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.Stats", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 int    `json:"limit"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Stats(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	router.RegisterFunc("API.Actions", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Actions(ctx, args.Arg0, args.Arg1)
	})

	router.RegisterFunc("API.Invoke", func(ctx context.Context, params json.RawMessage, positional bool) (interface{}, error) {
		var args struct {
			Arg0 *Token `json:"token"`
			Arg1 string `json:"uid"`
			Arg2 string `json:"action"`
		}
		var err error
		if positional {
			err = jsonrpc2.UnmarshalArray(params, &args.Arg0, &args.Arg1, &args.Arg2)
		} else {
			err = json.Unmarshal(params, &args)
		}
		if err != nil {
			return nil, err
		}
		err = typeHandler.ValidateToken(ctx, args.Arg0)
		if err != nil {
			return nil, err
		}
		return wrap.Invoke(ctx, args.Arg0, args.Arg1, args.Arg2)
	})

	return []string{"API.Login", "API.ChangePassword", "API.Create", "API.Config", "API.Apply", "API.AllTemplates", "API.CreateFromTemplate", "API.Upload", "API.Download", "API.Push", "API.Pull", "API.List", "API.Remove", "API.Templates", "API.Files", "API.Info", "API.Update", "API.CreateFile", "API.RemoveFile", "API.RenameFile", "API.GlobalStats", "API.Stats", "API.Actions", "API.Invoke"}
}
