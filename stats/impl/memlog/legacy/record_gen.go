package legacy

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Record) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 12 {
		err = msgp.ArrayError{Wanted: 12, Got: zb0001}
		return
	}
	z.UID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "UID")
		return
	}
	z.Input, err = dc.ReadBytes(z.Input)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	z.Output, err = dc.ReadBytes(z.Output)
	if err != nil {
		err = msgp.WrapError(err, "Output")
		return
	}
	z.Err, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	z.Code, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	z.Method, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	z.Remote, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Remote")
		return
	}
	z.Origin, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Origin")
		return
	}
	z.URI, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "URI")
		return
	}
	z.Token, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Token")
		return
	}
	z.Begin, err = dc.ReadTime()
	if err != nil {
		err = msgp.WrapError(err, "Begin")
		return
	}
	z.End, err = dc.ReadTime()
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Record) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 12
	err = en.Append(0x9c)
	if err != nil {
		return
	}
	err = en.WriteString(z.UID)
	if err != nil {
		err = msgp.WrapError(err, "UID")
		return
	}
	err = en.WriteBytes(z.Input)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	err = en.WriteBytes(z.Output)
	if err != nil {
		err = msgp.WrapError(err, "Output")
		return
	}
	err = en.WriteString(z.Err)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	err = en.WriteInt(z.Code)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	err = en.WriteString(z.Method)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	err = en.WriteString(z.Remote)
	if err != nil {
		err = msgp.WrapError(err, "Remote")
		return
	}
	err = en.WriteString(z.Origin)
	if err != nil {
		err = msgp.WrapError(err, "Origin")
		return
	}
	err = en.WriteString(z.URI)
	if err != nil {
		err = msgp.WrapError(err, "URI")
		return
	}
	err = en.WriteString(z.Token)
	if err != nil {
		err = msgp.WrapError(err, "Token")
		return
	}
	err = en.WriteTime(z.Begin)
	if err != nil {
		err = msgp.WrapError(err, "Begin")
		return
	}
	err = en.WriteTime(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Record) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 12
	o = append(o, 0x9c)
	o = msgp.AppendString(o, z.UID)
	o = msgp.AppendBytes(o, z.Input)
	o = msgp.AppendBytes(o, z.Output)
	o = msgp.AppendString(o, z.Err)
	o = msgp.AppendInt(o, z.Code)
	o = msgp.AppendString(o, z.Method)
	o = msgp.AppendString(o, z.Remote)
	o = msgp.AppendString(o, z.Origin)
	o = msgp.AppendString(o, z.URI)
	o = msgp.AppendString(o, z.Token)
	o = msgp.AppendTime(o, z.Begin)
	o = msgp.AppendTime(o, z.End)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Record) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 12 {
		err = msgp.ArrayError{Wanted: 12, Got: zb0001}
		return
	}
	z.UID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "UID")
		return
	}
	z.Input, bts, err = msgp.ReadBytesBytes(bts, z.Input)
	if err != nil {
		err = msgp.WrapError(err, "Input")
		return
	}
	z.Output, bts, err = msgp.ReadBytesBytes(bts, z.Output)
	if err != nil {
		err = msgp.WrapError(err, "Output")
		return
	}
	z.Err, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	z.Code, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Code")
		return
	}
	z.Method, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Method")
		return
	}
	z.Remote, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Remote")
		return
	}
	z.Origin, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Origin")
		return
	}
	z.URI, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "URI")
		return
	}
	z.Token, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Token")
		return
	}
	z.Begin, bts, err = msgp.ReadTimeBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Begin")
		return
	}
	z.End, bts, err = msgp.ReadTimeBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Record) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.UID) + msgp.BytesPrefixSize + len(z.Input) + msgp.BytesPrefixSize + len(z.Output) + msgp.StringPrefixSize + len(z.Err) + msgp.IntSize + msgp.StringPrefixSize + len(z.Method) + msgp.StringPrefixSize + len(z.Remote) + msgp.StringPrefixSize + len(z.Origin) + msgp.StringPrefixSize + len(z.URI) + msgp.StringPrefixSize + len(z.Token) + msgp.TimeSize + msgp.TimeSize
	return
}
