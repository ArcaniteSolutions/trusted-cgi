package stats

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"time"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Record) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "uid":
			z.UID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "err":
			z.Err, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "req":
			err = z.Request.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		case "beg":
			z.Begin, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "Begin")
				return
			}
		case "end":
			z.End, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Record) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	if z.UID == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Err == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Begin == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.End == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "uid"
		err = en.Append(0xa3, 0x75, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.UID)
		if err != nil {
			err = msgp.WrapError(err, "UID")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "err"
		err = en.Append(0xa3, 0x65, 0x72, 0x72)
		if err != nil {
			return
		}
		err = en.WriteString(z.Err)
		if err != nil {
			err = msgp.WrapError(err, "Err")
			return
		}
	}
	// write "req"
	err = en.Append(0xa3, 0x72, 0x65, 0x71)
	if err != nil {
		return
	}
	err = z.Request.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Request")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "beg"
		err = en.Append(0xa3, 0x62, 0x65, 0x67)
		if err != nil {
			return
		}
		err = en.WriteTime(z.Begin)
		if err != nil {
			err = msgp.WrapError(err, "Begin")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "end"
		err = en.Append(0xa3, 0x65, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteTime(z.End)
		if err != nil {
			err = msgp.WrapError(err, "End")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Record) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	if z.UID == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Err == "" {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Begin == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.End == (time.Time{}) {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "uid"
		o = append(o, 0xa3, 0x75, 0x69, 0x64)
		o = msgp.AppendString(o, z.UID)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "err"
		o = append(o, 0xa3, 0x65, 0x72, 0x72)
		o = msgp.AppendString(o, z.Err)
	}
	// string "req"
	o = append(o, 0xa3, 0x72, 0x65, 0x71)
	o, err = z.Request.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Request")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "beg"
		o = append(o, 0xa3, 0x62, 0x65, 0x67)
		o = msgp.AppendTime(o, z.Begin)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "end"
		o = append(o, 0xa3, 0x65, 0x6e, 0x64)
		o = msgp.AppendTime(o, z.End)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Record) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "uid":
			z.UID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "err":
			z.Err, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		case "req":
			bts, err = z.Request.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Request")
				return
			}
		case "beg":
			z.Begin, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Begin")
				return
			}
		case "end":
			z.End, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Record) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.UID) + 4 + msgp.StringPrefixSize + len(z.Err) + 4 + z.Request.Msgsize() + 4 + msgp.TimeSize + 4 + msgp.TimeSize
	return
}
